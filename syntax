=> unit: ( declStruct | declVar | declFunc )* END ;
=> declStruct: STRUCT ID LACC declVar* RACC SEMICOLON ;
=> declVar:  typeBase ID arrayDecl? ( COMMA ID arrayDecl? )* SEMICOLON ;

=> typeBase: INT | DOUBLE | CHAR | STRUCT ID ;
=> arrayDecl: LBRACKET expr? RBRACKET ;
=> typeName: typeBase arrayDecl? ;

=> declFunc: ( typeBase MUL? | VOID ) ID
            LPAR ( funcArg ( COMMA funcArg )* )? RPAR
            stmCompound ;

=> funcArg: typeBase ID arrayDecl? ;



=> stm: stmCompound
           | IF LPAR expr RPAR stm ( ELSE stm )?
           | WHILE LPAR expr RPAR stm
           | FOR LPAR expr? SEMICOLON expr? SEMICOLON expr? RPAR stm
           | BREAK SEMICOLON
           | RETURN expr? SEMICOLON
           | expr? SEMICOLON ;

=> stmCompound: LACC ( declVar | stm )* RACC ;


=> expr: exprAssign ;                                                #What is the point of this rename
=> exprAssign: exprUnary ASSIGN exprAssign | exprOr ;


######  exprOr: exprOr OR exprAnd | exprAnd ;
=> exprOr: exprAnd exprOr_
=> exprOr_: OR exprAnd exprOr_ | epsilon


###### exprAnd: exprAnd AND exprEq | exprEq ;
=> exprAnd: exprEq exprAnd_
=> exprAnd_: AND exprEq exprAnd_ | epsilon


###### exprEq: exprEq ( EQUAL | NOTEQ ) exprRel | exprRel ;
=> exprEq: exprRel exprEq_
=> exprEq_: ( EQUAL | NOTEQ ) exprRel exprEq_ | epsilon


###### exprRel: exprRel ( LESS | LESSEQ | GREATER | GREATEREQ ) exprAdd | exprAdd ;
=> exprRel: exprAdd exprRel_
=> exprRel_: ( LESS | LESSEQ | GREATER | GREATEREQ ) exprAdd exprRel_ | epsilon


###### exprAdd: exprAdd ( ADD | SUB ) exprMul | exprMul ;
=> exprAdd: exprMul exprAdd_
=> exprAdd_: ( ADD | SUB ) exprMul exprAdd_ | epsilon


###### exprMul: exprMul ( MUL | DIV ) exprCast | exprCast ;
=> exprMul: exprCast exprMul_
=> exprMul_: ( MUL | DIV ) exprCast exprMul_ | epsilon







=> exprCast: LPAR typeName RPAR exprCast | exprUnary ;
=> exprUnary: ( SUB | NOT ) exprUnary | exprPostfix ;



###### exprPostfix: exprPostfix LBRACKET expr RBRACKET
######           | exprPostfix DOT ID
######           | exprPrimary ;

=> exprPostfix: exprPrimary exprPostfix_
=> exprPostfix_: LBRACKET expr RBRACKET exprPostfix_
            | DOT ID exprPostfix_
            | epsilon


=> exprPrimary: ID ( LPAR ( expr ( COMMA expr )* )? RPAR )?
           | CT_INT
           | CT_REAL
           | CT_CHAR
           | CT_STRING
           | LPAR expr RPAR ;
